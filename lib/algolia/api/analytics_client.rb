# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'cgi'

module Algolia
  class AnalyticsClient
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def del(path, opts = {})
      data, _status_code, _headers = del_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def del_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.del ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling AnalyticsClient.del"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.del",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#del\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def get(path, opts = {})
      data, _status_code, _headers = get_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling AnalyticsClient.get"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get average click position.
    # Return the average click position for the complete time range and for individual days. > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetAverageClickPositionResponse]
    def get_average_click_position(index, opts = {})
      data, _status_code, _headers = get_average_click_position_with_http_info(index, opts)
      data
    end

    # Get average click position.
    # Return the average click position for the complete time range and for individual days. &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetAverageClickPositionResponse, Integer, Hash)>] GetAverageClickPositionResponse data, response status code and response headers
    def get_average_click_position_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_average_click_position ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_average_click_position"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_average_click_position, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_average_click_position, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/clicks/averageClickPosition'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAverageClickPositionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_average_click_position",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_average_click_position\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get click positions.
    # Show the number of clicks events and their associated position in the search results.  > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetClickPositionsResponse]
    def get_click_positions(index, opts = {})
      data, _status_code, _headers = get_click_positions_with_http_info(index, opts)
      data
    end

    # Get click positions.
    # Show the number of clicks events and their associated position in the search results.  &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetClickPositionsResponse, Integer, Hash)>] GetClickPositionsResponse data, response status code and response headers
    def get_click_positions_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_click_positions ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_click_positions"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_click_positions, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_click_positions, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/clicks/positions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClickPositionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_click_positions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_click_positions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get click-through rate (CTR).
    # Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetClickThroughRateResponse]
    def get_click_through_rate(index, opts = {})
      data, _status_code, _headers = get_click_through_rate_with_http_info(index, opts)
      data
    end

    # Get click-through rate (CTR).
    # Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetClickThroughRateResponse, Integer, Hash)>] GetClickThroughRateResponse data, response status code and response headers
    def get_click_through_rate_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_click_through_rate ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_click_through_rate"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_click_through_rate, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_click_through_rate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/clicks/clickThroughRate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetClickThroughRateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_click_through_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_click_through_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversion rate (CR).
    # Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetConversationRateResponse]
    def get_conversation_rate(index, opts = {})
      data, _status_code, _headers = get_conversation_rate_with_http_info(index, opts)
      data
    end

    # Get conversion rate (CR).
    # Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetConversationRateResponse, Integer, Hash)>] GetConversationRateResponse data, response status code and response headers
    def get_conversation_rate_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_conversation_rate ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_conversation_rate"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_conversation_rate, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_conversation_rate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/conversions/conversionRate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConversationRateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_conversation_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_conversation_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get no click rate.
    # Returns the rate at which searches don't lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetNoClickRateResponse]
    def get_no_click_rate(index, opts = {})
      data, _status_code, _headers = get_no_click_rate_with_http_info(index, opts)
      data
    end

    # Get no click rate.
    # Returns the rate at which searches don&#39;t lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetNoClickRateResponse, Integer, Hash)>] GetNoClickRateResponse data, response status code and response headers
    def get_no_click_rate_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_no_click_rate ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_no_click_rate"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_no_click_rate, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_no_click_rate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches/noClickRate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNoClickRateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_no_click_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_no_click_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get no results rate.
    # Returns the rate at which searches didn't return any results.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetNoResultsRateResponse]
    def get_no_results_rate(index, opts = {})
      data, _status_code, _headers = get_no_results_rate_with_http_info(index, opts)
      data
    end

    # Get no results rate.
    # Returns the rate at which searches didn&#39;t return any results.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetNoResultsRateResponse, Integer, Hash)>] GetNoResultsRateResponse data, response status code and response headers
    def get_no_results_rate_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_no_results_rate ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_no_results_rate"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_no_results_rate, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_no_results_rate, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches/noResultRate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNoResultsRateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_no_results_rate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_no_results_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get number of searches.
    # Returns the number of searches within a time range.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetSearchesCountResponse]
    def get_searches_count(index, opts = {})
      data, _status_code, _headers = get_searches_count_with_http_info(index, opts)
      data
    end

    # Get number of searches.
    # Returns the number of searches within a time range.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetSearchesCountResponse, Integer, Hash)>] GetSearchesCountResponse data, response status code and response headers
    def get_searches_count_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_searches_count ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_searches_count"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_searches_count, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_searches_count, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSearchesCountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_searches_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_searches_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top searches with no clicks.
    # Return the most popular of the last 1,000 searches that didn't lead to any clicks.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetSearchesNoClicksResponse]
    def get_searches_no_clicks(index, opts = {})
      data, _status_code, _headers = get_searches_no_clicks_with_http_info(index, opts)
      data
    end

    # Get top searches with no clicks.
    # Return the most popular of the last 1,000 searches that didn&#39;t lead to any clicks.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetSearchesNoClicksResponse, Integer, Hash)>] GetSearchesNoClicksResponse data, response status code and response headers
    def get_searches_no_clicks_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_searches_no_clicks ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_searches_no_clicks"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_searches_no_clicks, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_searches_no_clicks, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches/noClicks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSearchesNoClicksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_searches_no_clicks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_searches_no_clicks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top searches with no results.
    # Returns the most popular of the latest 1,000 searches that didn't return any results.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetSearchesNoResultsResponse]
    def get_searches_no_results(index, opts = {})
      data, _status_code, _headers = get_searches_no_results_with_http_info(index, opts)
      data
    end

    # Get top searches with no results.
    # Returns the most popular of the latest 1,000 searches that didn&#39;t return any results.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetSearchesNoResultsResponse, Integer, Hash)>] GetSearchesNoResultsResponse data, response status code and response headers
    def get_searches_no_results_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_searches_no_results ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_searches_no_results"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_searches_no_results, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_searches_no_results, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches/noResults'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSearchesNoResultsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_searches_no_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_searches_no_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Analytics API status.
    # Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, `updatedAt` will be `null`. > **Note**: The Analytics API is updated every 5&nbsp;minutes. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @return [GetStatusResponse]
    def get_status(index, opts = {})
      data, _status_code, _headers = get_status_with_http_info(index, opts)
      data
    end

    # Get Analytics API status.
    # Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, &#x60;updatedAt&#x60; will be &#x60;null&#x60;. &gt; **Note**: The Analytics API is updated every 5&amp;nbsp;minutes. 
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatusResponse, Integer, Hash)>] GetStatusResponse data, response status code and response headers
    def get_status_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_status ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_status"
      end
      # resource path
      local_var_path = '/2/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top countries.
    # Returns top countries. Limited to the 1,000 most frequent ones.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopCountriesResponse]
    def get_top_countries(index, opts = {})
      data, _status_code, _headers = get_top_countries_with_http_info(index, opts)
      data
    end

    # Get top countries.
    # Returns top countries. Limited to the 1,000 most frequent ones.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopCountriesResponse, Integer, Hash)>] GetTopCountriesResponse data, response status code and response headers
    def get_top_countries_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_countries ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_countries"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_countries, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_countries, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/countries'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopCountriesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_countries",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_countries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top filterable attributes.
    # Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopFilterAttributesResponse]
    def get_top_filter_attributes(index, opts = {})
      data, _status_code, _headers = get_top_filter_attributes_with_http_info(index, opts)
      data
    end

    # Get top filterable attributes.
    # Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopFilterAttributesResponse, Integer, Hash)>] GetTopFilterAttributesResponse data, response status code and response headers
    def get_top_filter_attributes_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_filter_attributes ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_filter_attributes"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_filter_attributes, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_filter_attributes, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/filters'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopFilterAttributesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_filter_attributes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_filter_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top filter values for an attribute.
    # Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
    # @param attribute [String] Attribute name.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopFilterForAttributeResponse]
    def get_top_filter_for_attribute(attribute, index, opts = {})
      data, _status_code, _headers = get_top_filter_for_attribute_with_http_info(attribute, index, opts)
      data
    end

    # Get top filter values for an attribute.
    # Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
    # @param attribute [String] Attribute name.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopFilterForAttributeResponse, Integer, Hash)>] GetTopFilterForAttributeResponse data, response status code and response headers
    def get_top_filter_for_attribute_with_http_info(attribute, index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_filter_for_attribute ...'
      end
      # verify the required parameter 'attribute' is set
      if @api_client.config.client_side_validation && attribute.nil?
        fail ArgumentError, "Missing the required parameter 'attribute' when calling AnalyticsClient.get_top_filter_for_attribute"
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_filter_for_attribute"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_filter_for_attribute, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_filter_for_attribute, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/filters/{attribute}'.sub('{' + 'attribute' + '}', CGI.escape(attribute.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopFilterForAttributeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_filter_for_attribute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_filter_for_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top filters for a no result search.
    # Returns top filters for filter-enabled searches that don't return results. Limited to the 1,000 most recently used filters.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopFiltersNoResultsResponse]
    def get_top_filters_no_results(index, opts = {})
      data, _status_code, _headers = get_top_filters_no_results_with_http_info(index, opts)
      data
    end

    # Get top filters for a no result search.
    # Returns top filters for filter-enabled searches that don&#39;t return results. Limited to the 1,000 most recently used filters.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopFiltersNoResultsResponse, Integer, Hash)>] GetTopFiltersNoResultsResponse data, response status code and response headers
    def get_top_filters_no_results_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_filters_no_results ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_filters_no_results"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_filters_no_results, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_filters_no_results, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/filters/noResults'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopFiltersNoResultsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_filters_no_results",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_filters_no_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top hits.
    # Return the most popular clicked results in the last 1,000 searches.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [Boolean] :click_analytics Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (default to false)
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopHitsResponse]
    def get_top_hits(index, opts = {})
      data, _status_code, _headers = get_top_hits_with_http_info(index, opts)
      data
    end

    # Get top hits.
    # Return the most popular clicked results in the last 1,000 searches.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search User query.
    # @option opts [Boolean] :click_analytics Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (default to false)
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopHitsResponse, Integer, Hash)>] GetTopHitsResponse data, response status code and response headers
    def get_top_hits_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_hits ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_hits"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_hits, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_hits, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/hits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'clickAnalytics'] = opts[:'click_analytics'] if !opts[:'click_analytics'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopHitsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_hits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_hits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get top searches.
    # Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :click_analytics Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (default to false)
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [OrderBy] :order_by Reorder the results. (default to 'searchCount')
    # @option opts [Direction] :direction Sorting direction of the results: ascending or descending.  (default to 'asc')
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetTopSearchesResponse]
    def get_top_searches(index, opts = {})
      data, _status_code, _headers = get_top_searches_with_http_info(index, opts)
      data
    end

    # Get top searches.
    # Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :click_analytics Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (default to false)
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [OrderBy] :order_by Reorder the results. (default to 'searchCount')
    # @option opts [Direction] :direction Sorting direction of the results: ascending or descending.  (default to 'asc')
    # @option opts [Integer] :limit Number of records to return (page size). (default to 10)
    # @option opts [Integer] :offset Position of the starting record. Used for paging. 0 is the first record. (default to 0)
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetTopSearchesResponse, Integer, Hash)>] GetTopSearchesResponse data, response status code and response headers
    def get_top_searches_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_top_searches ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_top_searches"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_top_searches, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_top_searches, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/searches'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'clickAnalytics'] = opts[:'click_analytics'] if !opts[:'click_analytics'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'direction'] = opts[:'direction'] if !opts[:'direction'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTopSearchesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_top_searches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_top_searches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user count.
    # Return the count of unique users.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [GetUsersCountResponse]
    def get_users_count(index, opts = {})
      data, _status_code, _headers = get_users_count_with_http_info(index, opts)
      data
    end

    # Get user count.
    # Return the count of unique users.
    # @param index [String] Index name to target.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :end_date End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze.
    # @option opts [String] :tags Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
    # @return [Array<(GetUsersCountResponse, Integer, Hash)>] GetUsersCountResponse data, response status code and response headers
    def get_users_count_with_http_info(index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.get_users_count ...'
      end
      # verify the required parameter 'index' is set
      if @api_client.config.client_side_validation && index.nil?
        fail ArgumentError, "Missing the required parameter 'index' when calling AnalyticsClient.get_users_count"
      end
      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'start_date'].nil? && opts[:'start_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"start_date\"]' when calling AnalyticsClient.get_users_count, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/)
      if @api_client.config.client_side_validation && !opts[:'end_date'].nil? && opts[:'end_date'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"end_date\"]' when calling AnalyticsClient.get_users_count, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/users/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = index
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUsersCountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.get_users_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#get_users_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def post(path, opts = {})
      data, _status_code, _headers = post_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.post ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling AnalyticsClient.post"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def put(path, opts = {})
      data, _status_code, _headers = put_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def put_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsClient.put ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling AnalyticsClient.put"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"AnalyticsClient.put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsClient#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
