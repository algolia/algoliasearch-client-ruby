# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'cgi'

module Algolia
  class QuerySuggestionsClient
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a configuration.
    # Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    # @param query_suggestions_configuration_with_index [QuerySuggestionsConfigurationWithIndex] 
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def create_config(query_suggestions_configuration_with_index, opts = {})
      data, _status_code, _headers = create_config_with_http_info(query_suggestions_configuration_with_index, opts)
      data
    end

    # Create a configuration.
    # Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    # @param query_suggestions_configuration_with_index [QuerySuggestionsConfigurationWithIndex] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def create_config_with_http_info(query_suggestions_configuration_with_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.create_config ...'
      end
      # verify the required parameter 'query_suggestions_configuration_with_index' is set
      if @api_client.config.client_side_validation && query_suggestions_configuration_with_index.nil?
        fail ArgumentError, "Missing the required parameter 'query_suggestions_configuration_with_index' when calling QuerySuggestionsClient.create_config"
      end
      # resource path
      local_var_path = '/1/configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(query_suggestions_configuration_with_index)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.create_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#create_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def del(path, opts = {})
      data, _status_code, _headers = del_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def del_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.del ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.del"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.del",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#del\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a configuration.
    # Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_config(index_name, opts = {})
      data, _status_code, _headers = delete_config_with_http_info(index_name, opts)
      data
    end

    # Delete a configuration.
    # Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def delete_config_with_http_info(index_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.delete_config ...'
      end
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        fail ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.delete_config"
      end
      # resource path
      local_var_path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.delete_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#delete_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def get(path, opts = {})
      data, _status_code, _headers = get_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.get"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List configurations.
    # List all Query Suggestions configurations of your Algolia application.
    # @param [Hash] opts the optional parameters
    # @return [Array<QuerySuggestionsConfigurationResponse>]
    def get_all_configs(opts = {})
      data, _status_code, _headers = get_all_configs_with_http_info(opts)
      data
    end

    # List configurations.
    # List all Query Suggestions configurations of your Algolia application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuerySuggestionsConfigurationResponse>, Integer, Hash)>] Array<QuerySuggestionsConfigurationResponse> data, response status code and response headers
    def get_all_configs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.get_all_configs ...'
      end
      # resource path
      local_var_path = '/1/configs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<QuerySuggestionsConfigurationResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.get_all_configs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#get_all_configs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a configuration.
    # Get a single Query Suggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [QuerySuggestionsConfigurationResponse]
    def get_config(index_name, opts = {})
      data, _status_code, _headers = get_config_with_http_info(index_name, opts)
      data
    end

    # Get a configuration.
    # Get a single Query Suggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuerySuggestionsConfigurationResponse, Integer, Hash)>] QuerySuggestionsConfigurationResponse data, response status code and response headers
    def get_config_with_http_info(index_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.get_config ...'
      end
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        fail ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_config"
      end
      # resource path
      local_var_path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuerySuggestionsConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.get_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration status.
    # Report the status of a Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [GetConfigStatus200Response]
    def get_config_status(index_name, opts = {})
      data, _status_code, _headers = get_config_status_with_http_info(index_name, opts)
      data
    end

    # Get configuration status.
    # Report the status of a Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetConfigStatus200Response, Integer, Hash)>] GetConfigStatus200Response data, response status code and response headers
    def get_config_status_with_http_info(index_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.get_config_status ...'
      end
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        fail ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_config_status"
      end
      # resource path
      local_var_path = '/1/configs/{indexName}/status'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetConfigStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.get_config_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#get_config_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs.
    # Get the logs for a single Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [GetLogFile200Response]
    def get_log_file(index_name, opts = {})
      data, _status_code, _headers = get_log_file_with_http_info(index_name, opts)
      data
    end

    # Get logs.
    # Get the logs for a single Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLogFile200Response, Integer, Hash)>] GetLogFile200Response data, response status code and response headers
    def get_log_file_with_http_info(index_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.get_log_file ...'
      end
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        fail ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_log_file"
      end
      # resource path
      local_var_path = '/1/logs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLogFile200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.get_log_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#get_log_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def post(path, opts = {})
      data, _status_code, _headers = post_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def post_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.post ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.post"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def put(path, opts = {})
      data, _status_code, _headers = put_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def put_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.put ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.put"
      end
      # resource path
      local_var_path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parameters'] = opts[:'parameters'] if !opts[:'parameters'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a configuration.
    # Update a QuerySuggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param query_suggestions_configuration [QuerySuggestionsConfiguration] 
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def update_config(index_name, query_suggestions_configuration, opts = {})
      data, _status_code, _headers = update_config_with_http_info(index_name, query_suggestions_configuration, opts)
      data
    end

    # Update a configuration.
    # Update a QuerySuggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param query_suggestions_configuration [QuerySuggestionsConfiguration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def update_config_with_http_info(index_name, query_suggestions_configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QuerySuggestionsClient.update_config ...'
      end
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        fail ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.update_config"
      end
      # verify the required parameter 'query_suggestions_configuration' is set
      if @api_client.config.client_side_validation && query_suggestions_configuration.nil?
        fail ArgumentError, "Missing the required parameter 'query_suggestions_configuration' when calling QuerySuggestionsClient.update_config"
      end
      # resource path
      local_var_path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(query_suggestions_configuration)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'appId']

      new_options = opts.merge(
        :operation => :"QuerySuggestionsClient.update_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QuerySuggestionsClient#update_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
