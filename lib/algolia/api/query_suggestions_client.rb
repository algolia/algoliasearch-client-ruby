# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'cgi'

module Algolia
  class QuerySuggestionsClient
    attr_accessor :api_client

    def initialize(config = nil)
      @api_client = Algolia::ApiClient.new(config)
    end

    def self.create(app_id, api_key, region = nil)
      hosts = []
      regions = ['eu', 'us']

      raise "`region` is required and must be one of the following: #{regions.join(', ')}" if region.nil? || (region != '' && !regions.include?(region))

      hosts << Transport::StatefulHost.new('query-suggestions.{region}.algolia.com'.sub!('{region}', region), accept: CallType::READ | CallType::WRITE)

      config = Algolia::Configuration.new(app_id, api_key, hosts, 'QuerySuggestions')
      create_with_config(config)
    end

    def self.create_with_config(config)
      new(config)
    end

    # Create a configuration.
    # Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.
    # @param query_suggestions_configuration_with_index [QuerySuggestionsConfigurationWithIndex]
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def create_config(query_suggestions_configuration_with_index, opts = {})
      data, _status_code, _headers = create_config_with_http_info(query_suggestions_configuration_with_index, opts)
      data
    end

    # Create a configuration.
    # Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.
    # @param query_suggestions_configuration_with_index [QuerySuggestionsConfigurationWithIndex]
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def create_config_with_http_info(query_suggestions_configuration_with_index, opts = {})
      # verify the required parameter 'query_suggestions_configuration_with_index' is set
      if @api_client.config.client_side_validation && query_suggestions_configuration_with_index.nil?
        raise ArgumentError, "Missing the required parameter 'query_suggestions_configuration_with_index' when calling QuerySuggestionsClient.create_config"
      end

      path = '/1/configs'
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(query_suggestions_configuration_with_index)

      return_type = opts[:debug_return_type] || 'QuerySuggestions::BaseResponse'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.create_config',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:POST, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def custom_delete(path, opts = {})
      data, _status_code, _headers = custom_delete_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_delete_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.custom_delete"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::Object'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.custom_delete',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:DELETE, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def custom_get(path, opts = {})
      data, _status_code, _headers = custom_get_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_get_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.custom_get"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::Object'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.custom_get',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def custom_post(path, opts = {})
      data, _status_code, _headers = custom_post_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_post_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.custom_post"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:debug_return_type] || 'QuerySuggestions::Object'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.custom_post',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:POST, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def custom_put(path, opts = {})
      data, _status_code, _headers = custom_put_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_put_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling QuerySuggestionsClient.custom_put"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:debug_return_type] || 'QuerySuggestions::Object'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.custom_put',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:PUT, path, new_options)
    end

    # Delete a configuration.
    # Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def delete_config(index_name, opts = {})
      data, _status_code, _headers = delete_config_with_http_info(index_name, opts)
      data
    end

    # Delete a configuration.
    # Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def delete_config_with_http_info(index_name, opts = {})
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        raise ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.delete_config"
      end

      path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::BaseResponse'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.delete_config',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:DELETE, path, new_options)
    end

    # List configurations.
    # List all Query Suggestions configurations of your Algolia application.
    # @param [Hash] opts the optional parameters
    # @return [Array<QuerySuggestionsConfigurationResponse>]
    def get_all_configs(opts = {})
      data, _status_code, _headers = get_all_configs_with_http_info(opts)
      data
    end

    # List configurations.
    # List all Query Suggestions configurations of your Algolia application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuerySuggestionsConfigurationResponse>, Integer, Hash)>] Array<QuerySuggestionsConfigurationResponse> data, response status code and response headers
    def get_all_configs_with_http_info(opts = {})
      path = '/1/configs'
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::Array<QuerySuggestionsConfigurationResponse>'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.get_all_configs',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Get a configuration.
    # Get a single Query Suggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [QuerySuggestionsConfigurationResponse]
    def get_config(index_name, opts = {})
      data, _status_code, _headers = get_config_with_http_info(index_name, opts)
      data
    end

    # Get a configuration.
    # Get a single Query Suggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuerySuggestionsConfigurationResponse, Integer, Hash)>] QuerySuggestionsConfigurationResponse data, response status code and response headers
    def get_config_with_http_info(index_name, opts = {})
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        raise ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_config"
      end

      path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::QuerySuggestionsConfigurationResponse'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.get_config',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Get configuration status.
    # Report the status of a Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [GetConfigStatus200Response]
    def get_config_status(index_name, opts = {})
      data, _status_code, _headers = get_config_status_with_http_info(index_name, opts)
      data
    end

    # Get configuration status.
    # Report the status of a Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetConfigStatus200Response, Integer, Hash)>] GetConfigStatus200Response data, response status code and response headers
    def get_config_status_with_http_info(index_name, opts = {})
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        raise ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_config_status"
      end

      path = '/1/configs/{indexName}/status'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::GetConfigStatus200Response'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.get_config_status',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Get logs.
    # Get the logs for a single Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [GetLogFile200Response]
    def get_log_file(index_name, opts = {})
      data, _status_code, _headers = get_log_file_with_http_info(index_name, opts)
      data
    end

    # Get logs.
    # Get the logs for a single Query Suggestions index.
    # @param index_name [String] Query Suggestions index name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetLogFile200Response, Integer, Hash)>] GetLogFile200Response data, response status code and response headers
    def get_log_file_with_http_info(index_name, opts = {})
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        raise ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.get_log_file"
      end

      path = '/1/logs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'QuerySuggestions::GetLogFile200Response'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.get_log_file',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Update a configuration.
    # Update a QuerySuggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param query_suggestions_configuration [QuerySuggestionsConfiguration]
    # @param [Hash] opts the optional parameters
    # @return [BaseResponse]
    def update_config(index_name, query_suggestions_configuration, opts = {})
      data, _status_code, _headers = update_config_with_http_info(index_name, query_suggestions_configuration, opts)
      data
    end

    # Update a configuration.
    # Update a QuerySuggestions configuration.
    # @param index_name [String] Query Suggestions index name.
    # @param query_suggestions_configuration [QuerySuggestionsConfiguration]
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseResponse, Integer, Hash)>] BaseResponse data, response status code and response headers
    def update_config_with_http_info(index_name, query_suggestions_configuration, opts = {})
      # verify the required parameter 'index_name' is set
      if @api_client.config.client_side_validation && index_name.nil?
        raise ArgumentError, "Missing the required parameter 'index_name' when calling QuerySuggestionsClient.update_config"
      end
      # verify the required parameter 'query_suggestions_configuration' is set
      if @api_client.config.client_side_validation && query_suggestions_configuration.nil?
        raise ArgumentError, "Missing the required parameter 'query_suggestions_configuration' when calling QuerySuggestionsClient.update_config"
      end

      path = '/1/configs/{indexName}'.sub('{' + 'indexName' + '}', CGI.escape(index_name.to_s))
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(query_suggestions_configuration)

      return_type = opts[:debug_return_type] || 'QuerySuggestions::BaseResponse'

      new_options = opts.merge(
        :operation => :'QuerySuggestionsClient.update_config',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:PUT, path, new_options)
    end
  end
end
