# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'cgi'

module Algolia
  class InsightsClient
    attr_accessor :api_client

    def initialize(config = nil)
      @api_client = Algolia::ApiClient.new(config)
    end

    def self.create(app_id, api_key, region = nil)
      hosts = []
      regions = ['de', 'us']

      raise "`region` must be one of the following: #{regions.join(', ')}" if region != '' && !regions.include?(region)

      hosts << Transport::StatefulHost.new(region.nil? ? 'insights.algolia.io' : 'insights.{region}.algolia.io'.sub!('{region}', region), accept: CallType::READ | CallType::WRITE)

      config = Algolia::Configuration.new(app_id, api_key, hosts, 'Insights')
      create_with_config(config)
    end

    def self.create_with_config(config)
      new(config)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def custom_delete(path, opts = {})
      data, _status_code, _headers = custom_delete_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_delete_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling InsightsClient.custom_delete"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'Insights::Object'

      new_options = opts.merge(
        :operation => :'InsightsClient.custom_delete',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:DELETE, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Object]
    def custom_get(path, opts = {})
      data, _status_code, _headers = custom_get_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_get_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling InsightsClient.custom_get"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body]

      return_type = opts[:debug_return_type] || 'Insights::Object'

      new_options = opts.merge(
        :operation => :'InsightsClient.custom_get',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:GET, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def custom_post(path, opts = {})
      data, _status_code, _headers = custom_post_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_post_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling InsightsClient.custom_post"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:debug_return_type] || 'Insights::Object'

      new_options = opts.merge(
        :operation => :'InsightsClient.custom_post',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:POST, path, new_options)
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Object]
    def custom_put(path, opts = {})
      data, _status_code, _headers = custom_put_with_http_info(path, opts)
      data
    end

    # Send requests to the Algolia REST API.
    # This method allow you to send requests to the Algolia REST API.
    # @param path [String] Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Object>] :parameters Query parameters to apply to the current query.
    # @option opts [Object] :body Parameters to send with the custom request.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def custom_put_with_http_info(path, opts = {})
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        raise ArgumentError, "Missing the required parameter 'path' when calling InsightsClient.custom_put"
      end

      path = '/1{path}'.sub('{' + 'path' + '}', CGI.escape(path.to_s))
      query_params = opts[:query_params] || {}
      query_params[:parameters] = opts[:parameters] unless opts[:parameters].nil?
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:body])

      return_type = opts[:debug_return_type] || 'Insights::Object'

      new_options = opts.merge(
        :operation => :'InsightsClient.custom_put',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:PUT, path, new_options)
    end

    # Send events.
    # Send a list of events to the Insights API.  You can include up to 1,000 events in a single request, but the request body must be smaller than 2&nbsp;MB.
    # @param insights_events [InsightsEvents]
    # @param [Hash] opts the optional parameters
    # @return [EventsResponse]
    def push_events(insights_events, opts = {})
      data, _status_code, _headers = push_events_with_http_info(insights_events, opts)
      data
    end

    # Send events.
    # Send a list of events to the Insights API.  You can include up to 1,000 events in a single request, but the request body must be smaller than 2&amp;nbsp;MB.
    # @param insights_events [InsightsEvents]
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventsResponse, Integer, Hash)>] EventsResponse data, response status code and response headers
    def push_events_with_http_info(insights_events, opts = {})
      # verify the required parameter 'insights_events' is set
      if @api_client.config.client_side_validation && insights_events.nil?
        raise ArgumentError, "Missing the required parameter 'insights_events' when calling InsightsClient.push_events"
      end

      path = '/1/events'
      query_params = opts[:query_params] || {}
      header_params = opts[:header_params] || {}

      post_body = opts[:debug_body] || @api_client.object_to_http_body(insights_events)

      return_type = opts[:debug_return_type] || 'Insights::EventsResponse'

      new_options = opts.merge(
        :operation => :'InsightsClient.push_events',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => false
      )

      @api_client.call_api(:POST, path, new_options)
    end
  end
end
