# frozen_string_literal: true

# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require "date"
require "time"

module Algolia
  module AbtestingV3
    class MetricResult
      attr_accessor :name

      # Date and time when the metric was last updated, in RFC 3339 format.
      attr_accessor :updated_at

      attr_accessor :value

      # The upper bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
      attr_accessor :value_ci_high

      # The lower bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
      attr_accessor :value_ci_low

      # PValue for the first variant (control) will always be 0. For the other variants, pValue is calculated for the current variant based on the control.
      attr_accessor :p_value

      # Dimension defined during test creation.
      attr_accessor :dimension

      attr_accessor :metadata

      # The value that was computed during error correction. It is used to determine significance of the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg corrections, based on the given configuration during the A/B test creation.
      attr_accessor :critical_value

      # Whether the pValue is significant or not based on the critical value and the error correction algorithm used.
      attr_accessor :significant

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :name => :name,
          :updated_at => :updatedAt,
          :value => :value,
          :value_ci_high => :valueCIHigh,
          :value_ci_low => :valueCILow,
          :p_value => :pValue,
          :dimension => :dimension,
          :metadata => :metadata,
          :critical_value => :criticalValue,
          :significant => :significant
        }
      end

      # Attribute type mapping.
      def self.types_mapping
        {
          :name => :"String",
          :updated_at => :"String",
          :value => :"Float",
          :value_ci_high => :"Float",
          :value_ci_low => :"Float",
          :p_value => :"Float",
          :dimension => :"String",
          :metadata => :"MetricMetadata",
          :critical_value => :"Float",
          :significant => :"Boolean"
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new(
          []
        )
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          raise(
            ArgumentError,
            "The input argument (attributes) must be a hash in `Algolia::MetricResult` initialize method"
          )
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            raise(
              ArgumentError,
              "`#{k}` is not a valid attribute in `Algolia::MetricResult`. Please check the name to make sure it's valid. List of attributes: " +
                self.class.attribute_map.keys.inspect
            )
          end

          h[k.to_sym] = v
        }

        if attributes.key?(:name)
          self.name = attributes[:name]
        else
          self.name = nil
        end

        if attributes.key?(:updated_at)
          self.updated_at = attributes[:updated_at]
        else
          self.updated_at = nil
        end

        if attributes.key?(:value)
          self.value = attributes[:value]
        else
          self.value = nil
        end

        if attributes.key?(:value_ci_high)
          self.value_ci_high = attributes[:value_ci_high]
        end

        if attributes.key?(:value_ci_low)
          self.value_ci_low = attributes[:value_ci_low]
        end

        if attributes.key?(:p_value)
          self.p_value = attributes[:p_value]
        else
          self.p_value = nil
        end

        if attributes.key?(:dimension)
          self.dimension = attributes[:dimension]
        end

        if attributes.key?(:metadata)
          self.metadata = attributes[:metadata]
        end

        if attributes.key?(:critical_value)
          self.critical_value = attributes[:critical_value]
        end

        if attributes.key?(:significant)
          self.significant = attributes[:significant]
        end
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(other)
        return true if self.equal?(other)
        self.class == other.class &&
          name == other.name &&
          updated_at == other.updated_at &&
          value == other.value &&
          value_ci_high == other.value_ci_high &&
          value_ci_low == other.value_ci_low &&
          p_value == other.p_value &&
          dimension == other.dimension &&
          metadata == other.metadata &&
          critical_value == other.critical_value &&
          significant == other.significant
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(other)
        self == other
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [
          name,
          updated_at,
          value,
          value_ci_high,
          value_ci_low,
          p_value,
          dimension,
          metadata,
          critical_value,
          significant
        ].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        transformed_hash = {}
        types_mapping.each_pair do |key, type|
          if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = nil
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[attribute_map[key]].is_a?(Array)
              transformed_hash[key.to_sym] = attributes[attribute_map[key]].map { |v|
                _deserialize(::Regexp.last_match(1), v)
              }
            end
          elsif !attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = _deserialize(type, attributes[attribute_map[key]])
          end
        end

        new(transformed_hash)
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def self._deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end

        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
          # model
        else
          # models (e.g. Pet) or oneOf
          klass = Algolia::AbtestingV3.const_get(type)
          klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass
            .build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      def to_json(*_args)
        to_hash.to_json
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end

        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to?(:to_hash)
          value.to_hash
        else
          value
        end
      end

    end

  end
end
