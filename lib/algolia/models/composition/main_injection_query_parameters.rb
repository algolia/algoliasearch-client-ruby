# frozen_string_literal: true

# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require "date"
require "time"

module Algolia
  module Composition
    class MainInjectionQueryParameters
      # Whether to support phrase matching and excluding words from search queries Use the `advancedSyntaxFeatures` parameter to control which feature is supported.
      attr_accessor :advanced_syntax

      # Advanced search syntax features you want to support - `exactPhrase`.   Phrases in quotes must match exactly.   For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\" - `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine` matches records that contain \"search\" but not \"engine\" This setting only has an effect if `advancedSyntax` is true.
      attr_accessor :advanced_syntax_features

      # Whether to allow typos on numbers in the search query Turn off this setting to reduce the number of irrelevant matches when searching in large sets of similar numbers.
      attr_accessor :allow_typos_on_numeric_tokens

      # Determine which plurals and synonyms should be considered an exact matches By default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching. For example - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)) - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches - `singleWordSynonym`.   Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches - `multiWordsSynonym`.   Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.
      attr_accessor :alternatives_as_exact

      # Whether this search will be included in Analytics.
      attr_accessor :analytics

      # Whether the best matching attribute should be determined by minimum proximity This setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.
      attr_accessor :attribute_criteria_computed_by_min_proximity

      # Attributes to highlight By default, all searchable attributes are highlighted. Use `*` to highlight all attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive With highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI For more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js).
      attr_accessor :attributes_to_highlight

      # Attributes to include in the API response To reduce the size of your response, you can retrieve only some of the attributes. Attribute names are case-sensitive - `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is always included.
      attr_accessor :attributes_to_retrieve

      # Attributes for which to enable snippets. Attribute names are case-sensitive Snippets provide additional context to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
      attr_accessor :attributes_to_snippet

      # Whether to include a `queryID` attribute in the response The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/doc/guides/sending-events/getting-started).
      attr_accessor :click_analytics

      # Whether to split compound words in the query into their building blocks For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words). Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian. Decompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).
      attr_accessor :decompound_query

      # Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes). Attribute names are case-sensitive This can be useful for attributes with long values, where the likelihood of an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content on ranking.
      attr_accessor :disable_exact_on_attributes

      # Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance). Attribute names are case-sensitive Returning only exact matches can help when - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes). - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks of text, such as product descriptions Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.
      attr_accessor :disable_typo_tolerance_on_attributes

      attr_accessor :distinct

      # Whether to enable A/B testing for this search.
      attr_accessor :enable_ab_test

      # Whether to enable Personalization.
      attr_accessor :enable_personalization

      # Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking) This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
      attr_accessor :enable_re_ranking

      # Whether to enable rules.
      attr_accessor :enable_rules

      attr_accessor :exact_on_single_word_query

      attr_accessor :facet_filters

      # Filter expression to only include items that match the filter criteria in the response.  You can use these filter expressions:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering).
      attr_accessor :filters

      # Whether the search response should include detailed ranking information.
      attr_accessor :get_ranking_info

      # HTML tag to insert after the highlighted parts in all highlighted results and snippets.
      attr_accessor :highlight_post_tag

      # HTML tag to insert before the highlighted parts in all highlighted results and snippets.
      attr_accessor :highlight_pre_tag

      attr_accessor :ignore_plurals

      # Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
      attr_accessor :max_facet_hits

      # Minimum proximity score for two matching words This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity) by equally scoring matches that are farther apart For example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.
      attr_accessor :min_proximity

      # Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
      attr_accessor :min_word_sizefor1_typo

      # Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
      attr_accessor :min_word_sizefor2_typos

      # ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches) - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
      attr_accessor :natural_languages

      attr_accessor :numeric_filters

      attr_accessor :optional_filters

      attr_accessor :optional_words

      # Whether to include this search when calculating processing-time percentiles.
      attr_accessor :percentile_computation

      # Impact that Personalization should have on this search The higher this value is, the more Personalization determines the ranking compared to other factors. For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
      attr_accessor :personalization_impact

      # Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations).
      attr_accessor :query_languages

      attr_accessor :query_type

      attr_accessor :remove_stop_words

      attr_accessor :remove_words_if_no_results

      # Whether to replace a highlighted word with the matched synonym By default, the original words are highlighted even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
      attr_accessor :replace_synonyms_in_highlight

      # Properties to include in the API response of search and browse requests By default, all response properties are included. To reduce the response size, you can select which properties should be included An empty list may lead to an empty API response (except properties you can't exclude) You can't exclude these properties: `message`, `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true Your search depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also depend on other properties, for example, for pagination. Before restricting the response size, check the impact on your search experience.
      attr_accessor :response_fields

      # Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By default, all items are highlighted and snippeted.
      attr_accessor :restrict_highlight_and_snippet_arrays

      # Restricts a search to a subset of your searchable attributes. Attribute names are case-sensitive.
      attr_accessor :restrict_searchable_attributes

      # Assigns a rule context to the search query [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
      attr_accessor :rule_contexts

      # String used as an ellipsis indicator when a snippet is truncated.
      attr_accessor :snippet_ellipsis_text

      # Whether to take into account an index's synonyms for this search.
      attr_accessor :synonyms

      attr_accessor :typo_tolerance

      # Whether faceting should be applied after deduplication with `distinct` This leads to accurate facet counts when using faceting in combination with `distinct`. It's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting, as `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.
      attr_accessor :faceting_after_distinct

      # Facets for which to retrieve facet values that match the search criteria and the number of matching facet values To retrieve all facets, use the wildcard character `*`. For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
      attr_accessor :facets

      # Number of hits per page.
      attr_accessor :hits_per_page

      # Maximum number of facet values to return for each facet.
      attr_accessor :max_values_per_facet

      # Order in which to retrieve facet values - `count`.   Facet values are retrieved by decreasing count.   The count is the number of matching records containing this facet value - `alpha`.   Retrieve facet values alphabetically This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js).
      attr_accessor :sort_facet_values_by

      # Whether to sum all filter scores If true, all filter scores are summed. Otherwise, the maximum filter score is kept. For more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
      attr_accessor :sum_or_filters_scores

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :advanced_syntax => :advancedSyntax,
          :advanced_syntax_features => :advancedSyntaxFeatures,
          :allow_typos_on_numeric_tokens => :allowTyposOnNumericTokens,
          :alternatives_as_exact => :alternativesAsExact,
          :analytics => :analytics,
          :attribute_criteria_computed_by_min_proximity => :attributeCriteriaComputedByMinProximity,
          :attributes_to_highlight => :attributesToHighlight,
          :attributes_to_retrieve => :attributesToRetrieve,
          :attributes_to_snippet => :attributesToSnippet,
          :click_analytics => :clickAnalytics,
          :decompound_query => :decompoundQuery,
          :disable_exact_on_attributes => :disableExactOnAttributes,
          :disable_typo_tolerance_on_attributes => :disableTypoToleranceOnAttributes,
          :distinct => :distinct,
          :enable_ab_test => :enableABTest,
          :enable_personalization => :enablePersonalization,
          :enable_re_ranking => :enableReRanking,
          :enable_rules => :enableRules,
          :exact_on_single_word_query => :exactOnSingleWordQuery,
          :facet_filters => :facetFilters,
          :filters => :filters,
          :get_ranking_info => :getRankingInfo,
          :highlight_post_tag => :highlightPostTag,
          :highlight_pre_tag => :highlightPreTag,
          :ignore_plurals => :ignorePlurals,
          :max_facet_hits => :maxFacetHits,
          :min_proximity => :minProximity,
          :min_word_sizefor1_typo => :minWordSizefor1Typo,
          :min_word_sizefor2_typos => :minWordSizefor2Typos,
          :natural_languages => :naturalLanguages,
          :numeric_filters => :numericFilters,
          :optional_filters => :optionalFilters,
          :optional_words => :optionalWords,
          :percentile_computation => :percentileComputation,
          :personalization_impact => :personalizationImpact,
          :query_languages => :queryLanguages,
          :query_type => :queryType,
          :remove_stop_words => :removeStopWords,
          :remove_words_if_no_results => :removeWordsIfNoResults,
          :replace_synonyms_in_highlight => :replaceSynonymsInHighlight,
          :response_fields => :responseFields,
          :restrict_highlight_and_snippet_arrays => :restrictHighlightAndSnippetArrays,
          :restrict_searchable_attributes => :restrictSearchableAttributes,
          :rule_contexts => :ruleContexts,
          :snippet_ellipsis_text => :snippetEllipsisText,
          :synonyms => :synonyms,
          :typo_tolerance => :typoTolerance,
          :faceting_after_distinct => :facetingAfterDistinct,
          :facets => :facets,
          :hits_per_page => :hitsPerPage,
          :max_values_per_facet => :maxValuesPerFacet,
          :sort_facet_values_by => :sortFacetValuesBy,
          :sum_or_filters_scores => :sumOrFiltersScores
        }
      end

      # Attribute type mapping.
      def self.types_mapping
        {
          :advanced_syntax => :"Boolean",
          :advanced_syntax_features => :"Array<AdvancedSyntaxFeatures>",
          :allow_typos_on_numeric_tokens => :"Boolean",
          :alternatives_as_exact => :"Array<AlternativesAsExact>",
          :analytics => :"Boolean",
          :attribute_criteria_computed_by_min_proximity => :"Boolean",
          :attributes_to_highlight => :"Array<String>",
          :attributes_to_retrieve => :"Array<String>",
          :attributes_to_snippet => :"Array<String>",
          :click_analytics => :"Boolean",
          :decompound_query => :"Boolean",
          :disable_exact_on_attributes => :"Array<String>",
          :disable_typo_tolerance_on_attributes => :"Array<String>",
          :distinct => :"Distinct",
          :enable_ab_test => :"Boolean",
          :enable_personalization => :"Boolean",
          :enable_re_ranking => :"Boolean",
          :enable_rules => :"Boolean",
          :exact_on_single_word_query => :"ExactOnSingleWordQuery",
          :facet_filters => :"FacetFilters",
          :filters => :"String",
          :get_ranking_info => :"Boolean",
          :highlight_post_tag => :"String",
          :highlight_pre_tag => :"String",
          :ignore_plurals => :"IgnorePlurals",
          :max_facet_hits => :"Integer",
          :min_proximity => :"Integer",
          :min_word_sizefor1_typo => :"Integer",
          :min_word_sizefor2_typos => :"Integer",
          :natural_languages => :"Array<SupportedLanguage>",
          :numeric_filters => :"NumericFilters",
          :optional_filters => :"OptionalFilters",
          :optional_words => :"OptionalWords",
          :percentile_computation => :"Boolean",
          :personalization_impact => :"Integer",
          :query_languages => :"Array<SupportedLanguage>",
          :query_type => :"QueryType",
          :remove_stop_words => :"RemoveStopWords",
          :remove_words_if_no_results => :"RemoveWordsIfNoResults",
          :replace_synonyms_in_highlight => :"Boolean",
          :response_fields => :"Array<String>",
          :restrict_highlight_and_snippet_arrays => :"Boolean",
          :restrict_searchable_attributes => :"Array<String>",
          :rule_contexts => :"Array<String>",
          :snippet_ellipsis_text => :"String",
          :synonyms => :"Boolean",
          :typo_tolerance => :"TypoTolerance",
          :faceting_after_distinct => :"Boolean",
          :facets => :"Array<String>",
          :hits_per_page => :"Integer",
          :max_values_per_facet => :"Integer",
          :sort_facet_values_by => :"String",
          :sum_or_filters_scores => :"Boolean"
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new(
          [
            :optional_words
          ]
        )
      end

      # List of class defined in allOf (OpenAPI v3)
      def self.openapi_all_of
        [
          :"BaseInjectionQueryParameters"
        ]
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          raise(
            ArgumentError,
            "The input argument (attributes) must be a hash in `Algolia::MainInjectionQueryParameters` initialize method"
          )
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            raise(
              ArgumentError,
              "`#{k}` is not a valid attribute in `Algolia::MainInjectionQueryParameters`. Please check the name to make sure it's valid. List of attributes: " +
                self.class.attribute_map.keys.inspect
            )
          end

          h[k.to_sym] = v
        }

        if attributes.key?(:advanced_syntax)
          self.advanced_syntax = attributes[:advanced_syntax]
        end

        if attributes.key?(:advanced_syntax_features)
          if (value = attributes[:advanced_syntax_features]).is_a?(Array)
            self.advanced_syntax_features = value
          end
        end

        if attributes.key?(:allow_typos_on_numeric_tokens)
          self.allow_typos_on_numeric_tokens = attributes[:allow_typos_on_numeric_tokens]
        end

        if attributes.key?(:alternatives_as_exact)
          if (value = attributes[:alternatives_as_exact]).is_a?(Array)
            self.alternatives_as_exact = value
          end
        end

        if attributes.key?(:analytics)
          self.analytics = attributes[:analytics]
        end

        if attributes.key?(:attribute_criteria_computed_by_min_proximity)
          self.attribute_criteria_computed_by_min_proximity = attributes[:attribute_criteria_computed_by_min_proximity]
        end

        if attributes.key?(:attributes_to_highlight)
          if (value = attributes[:attributes_to_highlight]).is_a?(Array)
            self.attributes_to_highlight = value
          end
        end

        if attributes.key?(:attributes_to_retrieve)
          if (value = attributes[:attributes_to_retrieve]).is_a?(Array)
            self.attributes_to_retrieve = value
          end
        end

        if attributes.key?(:attributes_to_snippet)
          if (value = attributes[:attributes_to_snippet]).is_a?(Array)
            self.attributes_to_snippet = value
          end
        end

        if attributes.key?(:click_analytics)
          self.click_analytics = attributes[:click_analytics]
        end

        if attributes.key?(:decompound_query)
          self.decompound_query = attributes[:decompound_query]
        end

        if attributes.key?(:disable_exact_on_attributes)
          if (value = attributes[:disable_exact_on_attributes]).is_a?(Array)
            self.disable_exact_on_attributes = value
          end
        end

        if attributes.key?(:disable_typo_tolerance_on_attributes)
          if (value = attributes[:disable_typo_tolerance_on_attributes]).is_a?(Array)
            self.disable_typo_tolerance_on_attributes = value
          end
        end

        if attributes.key?(:distinct)
          self.distinct = attributes[:distinct]
        end

        if attributes.key?(:enable_ab_test)
          self.enable_ab_test = attributes[:enable_ab_test]
        end

        if attributes.key?(:enable_personalization)
          self.enable_personalization = attributes[:enable_personalization]
        end

        if attributes.key?(:enable_re_ranking)
          self.enable_re_ranking = attributes[:enable_re_ranking]
        end

        if attributes.key?(:enable_rules)
          self.enable_rules = attributes[:enable_rules]
        end

        if attributes.key?(:exact_on_single_word_query)
          self.exact_on_single_word_query = attributes[:exact_on_single_word_query]
        end

        if attributes.key?(:facet_filters)
          self.facet_filters = attributes[:facet_filters]
        end

        if attributes.key?(:filters)
          self.filters = attributes[:filters]
        end

        if attributes.key?(:get_ranking_info)
          self.get_ranking_info = attributes[:get_ranking_info]
        end

        if attributes.key?(:highlight_post_tag)
          self.highlight_post_tag = attributes[:highlight_post_tag]
        end

        if attributes.key?(:highlight_pre_tag)
          self.highlight_pre_tag = attributes[:highlight_pre_tag]
        end

        if attributes.key?(:ignore_plurals)
          self.ignore_plurals = attributes[:ignore_plurals]
        end

        if attributes.key?(:max_facet_hits)
          self.max_facet_hits = attributes[:max_facet_hits]
        end

        if attributes.key?(:min_proximity)
          self.min_proximity = attributes[:min_proximity]
        end

        if attributes.key?(:min_word_sizefor1_typo)
          self.min_word_sizefor1_typo = attributes[:min_word_sizefor1_typo]
        end

        if attributes.key?(:min_word_sizefor2_typos)
          self.min_word_sizefor2_typos = attributes[:min_word_sizefor2_typos]
        end

        if attributes.key?(:natural_languages)
          if (value = attributes[:natural_languages]).is_a?(Array)
            self.natural_languages = value
          end
        end

        if attributes.key?(:numeric_filters)
          self.numeric_filters = attributes[:numeric_filters]
        end

        if attributes.key?(:optional_filters)
          self.optional_filters = attributes[:optional_filters]
        end

        if attributes.key?(:optional_words)
          self.optional_words = attributes[:optional_words]
        end

        if attributes.key?(:percentile_computation)
          self.percentile_computation = attributes[:percentile_computation]
        end

        if attributes.key?(:personalization_impact)
          self.personalization_impact = attributes[:personalization_impact]
        end

        if attributes.key?(:query_languages)
          if (value = attributes[:query_languages]).is_a?(Array)
            self.query_languages = value
          end
        end

        if attributes.key?(:query_type)
          self.query_type = attributes[:query_type]
        end

        if attributes.key?(:remove_stop_words)
          self.remove_stop_words = attributes[:remove_stop_words]
        end

        if attributes.key?(:remove_words_if_no_results)
          self.remove_words_if_no_results = attributes[:remove_words_if_no_results]
        end

        if attributes.key?(:replace_synonyms_in_highlight)
          self.replace_synonyms_in_highlight = attributes[:replace_synonyms_in_highlight]
        end

        if attributes.key?(:response_fields)
          if (value = attributes[:response_fields]).is_a?(Array)
            self.response_fields = value
          end
        end

        if attributes.key?(:restrict_highlight_and_snippet_arrays)
          self.restrict_highlight_and_snippet_arrays = attributes[:restrict_highlight_and_snippet_arrays]
        end

        if attributes.key?(:restrict_searchable_attributes)
          if (value = attributes[:restrict_searchable_attributes]).is_a?(Array)
            self.restrict_searchable_attributes = value
          end
        end

        if attributes.key?(:rule_contexts)
          if (value = attributes[:rule_contexts]).is_a?(Array)
            self.rule_contexts = value
          end
        end

        if attributes.key?(:snippet_ellipsis_text)
          self.snippet_ellipsis_text = attributes[:snippet_ellipsis_text]
        end

        if attributes.key?(:synonyms)
          self.synonyms = attributes[:synonyms]
        end

        if attributes.key?(:typo_tolerance)
          self.typo_tolerance = attributes[:typo_tolerance]
        end

        if attributes.key?(:faceting_after_distinct)
          self.faceting_after_distinct = attributes[:faceting_after_distinct]
        end

        if attributes.key?(:facets)
          if (value = attributes[:facets]).is_a?(Array)
            self.facets = value
          end
        end

        if attributes.key?(:hits_per_page)
          self.hits_per_page = attributes[:hits_per_page]
        end

        if attributes.key?(:max_values_per_facet)
          self.max_values_per_facet = attributes[:max_values_per_facet]
        end

        if attributes.key?(:sort_facet_values_by)
          self.sort_facet_values_by = attributes[:sort_facet_values_by]
        end

        if attributes.key?(:sum_or_filters_scores)
          self.sum_or_filters_scores = attributes[:sum_or_filters_scores]
        end
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(other)
        return true if self.equal?(other)
        self.class == other.class &&
          advanced_syntax == other.advanced_syntax &&
          advanced_syntax_features == other.advanced_syntax_features &&
          allow_typos_on_numeric_tokens == other.allow_typos_on_numeric_tokens &&
          alternatives_as_exact == other.alternatives_as_exact &&
          analytics == other.analytics &&
          attribute_criteria_computed_by_min_proximity == other.attribute_criteria_computed_by_min_proximity &&
          attributes_to_highlight == other.attributes_to_highlight &&
          attributes_to_retrieve == other.attributes_to_retrieve &&
          attributes_to_snippet == other.attributes_to_snippet &&
          click_analytics == other.click_analytics &&
          decompound_query == other.decompound_query &&
          disable_exact_on_attributes == other.disable_exact_on_attributes &&
          disable_typo_tolerance_on_attributes == other.disable_typo_tolerance_on_attributes &&
          distinct == other.distinct &&
          enable_ab_test == other.enable_ab_test &&
          enable_personalization == other.enable_personalization &&
          enable_re_ranking == other.enable_re_ranking &&
          enable_rules == other.enable_rules &&
          exact_on_single_word_query == other.exact_on_single_word_query &&
          facet_filters == other.facet_filters &&
          filters == other.filters &&
          get_ranking_info == other.get_ranking_info &&
          highlight_post_tag == other.highlight_post_tag &&
          highlight_pre_tag == other.highlight_pre_tag &&
          ignore_plurals == other.ignore_plurals &&
          max_facet_hits == other.max_facet_hits &&
          min_proximity == other.min_proximity &&
          min_word_sizefor1_typo == other.min_word_sizefor1_typo &&
          min_word_sizefor2_typos == other.min_word_sizefor2_typos &&
          natural_languages == other.natural_languages &&
          numeric_filters == other.numeric_filters &&
          optional_filters == other.optional_filters &&
          optional_words == other.optional_words &&
          percentile_computation == other.percentile_computation &&
          personalization_impact == other.personalization_impact &&
          query_languages == other.query_languages &&
          query_type == other.query_type &&
          remove_stop_words == other.remove_stop_words &&
          remove_words_if_no_results == other.remove_words_if_no_results &&
          replace_synonyms_in_highlight == other.replace_synonyms_in_highlight &&
          response_fields == other.response_fields &&
          restrict_highlight_and_snippet_arrays == other.restrict_highlight_and_snippet_arrays &&
          restrict_searchable_attributes == other.restrict_searchable_attributes &&
          rule_contexts == other.rule_contexts &&
          snippet_ellipsis_text == other.snippet_ellipsis_text &&
          synonyms == other.synonyms &&
          typo_tolerance == other.typo_tolerance &&
          faceting_after_distinct == other.faceting_after_distinct &&
          facets == other.facets &&
          hits_per_page == other.hits_per_page &&
          max_values_per_facet == other.max_values_per_facet &&
          sort_facet_values_by == other.sort_facet_values_by &&
          sum_or_filters_scores == other.sum_or_filters_scores
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(other)
        self == other
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [
          advanced_syntax,
          advanced_syntax_features,
          allow_typos_on_numeric_tokens,
          alternatives_as_exact,
          analytics,
          attribute_criteria_computed_by_min_proximity,
          attributes_to_highlight,
          attributes_to_retrieve,
          attributes_to_snippet,
          click_analytics,
          decompound_query,
          disable_exact_on_attributes,
          disable_typo_tolerance_on_attributes,
          distinct,
          enable_ab_test,
          enable_personalization,
          enable_re_ranking,
          enable_rules,
          exact_on_single_word_query,
          facet_filters,
          filters,
          get_ranking_info,
          highlight_post_tag,
          highlight_pre_tag,
          ignore_plurals,
          max_facet_hits,
          min_proximity,
          min_word_sizefor1_typo,
          min_word_sizefor2_typos,
          natural_languages,
          numeric_filters,
          optional_filters,
          optional_words,
          percentile_computation,
          personalization_impact,
          query_languages,
          query_type,
          remove_stop_words,
          remove_words_if_no_results,
          replace_synonyms_in_highlight,
          response_fields,
          restrict_highlight_and_snippet_arrays,
          restrict_searchable_attributes,
          rule_contexts,
          snippet_ellipsis_text,
          synonyms,
          typo_tolerance,
          faceting_after_distinct,
          facets,
          hits_per_page,
          max_values_per_facet,
          sort_facet_values_by,
          sum_or_filters_scores
        ].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        transformed_hash = {}
        types_mapping.each_pair do |key, type|
          if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = nil
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[attribute_map[key]].is_a?(Array)
              transformed_hash[key.to_sym] = attributes[attribute_map[key]].map { |v|
                _deserialize(::Regexp.last_match(1), v)
              }
            end
          elsif !attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = _deserialize(type, attributes[attribute_map[key]])
          end
        end

        new(transformed_hash)
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def self._deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end

        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
          # model
        else
          # models (e.g. Pet) or oneOf
          klass = Algolia::Composition.const_get(type)
          klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass
            .build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      def to_json(*_args)
        to_hash.to_json
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end

        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to?(:to_hash)
          value.to_hash
        else
          value
        end
      end
    end
  end
end
