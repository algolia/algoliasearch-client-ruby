# frozen_string_literal: true

# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require "date"
require "time"

module Algolia
  module Composition
    class Params
      # Search query.
      attr_accessor :query

      # Filter expression to only include items that match the filter criteria in the response.  You can use these filter expressions:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.   **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter matches if it matches at least one element of the array.  For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
      attr_accessor :filters

      # Page of search results to retrieve.
      attr_accessor :page

      # Whether the search response should include detailed ranking information.
      attr_accessor :get_ranking_info

      attr_accessor :relevancy_strictness

      attr_accessor :facet_filters

      attr_accessor :optional_filters

      attr_accessor :numeric_filters

      # Number of hits per page.
      attr_accessor :hits_per_page

      # Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.  Only records included within a circle around this central location are included in the results. The radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings. This parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.
      attr_accessor :around_lat_lng

      # Whether to obtain the coordinates from the request's IP address.
      attr_accessor :around_lat_lng_via_ip

      attr_accessor :around_radius

      attr_accessor :around_precision

      # Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.
      attr_accessor :minimum_around_radius

      attr_accessor :inside_bounding_box

      # Coordinates of a polygon in which to search.  Polygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude. Provide multiple polygons as nested arrays. For more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas). This parameter is ignored if you also specify `insideBoundingBox`.
      attr_accessor :inside_polygon

      # Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages. To support this, you must place the CJK language **first**.  **You should always specify a query language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).
      attr_accessor :query_languages

      # ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):  - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
      attr_accessor :natural_languages

      # Whether to enable rules.
      attr_accessor :enable_rules

      # Assigns a rule context to the search query.  [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
      attr_accessor :rule_contexts

      # Unique pseudonymous or anonymous user identifier.  This helps with analytics and click and conversion events. For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
      attr_accessor :user_token

      # Whether to include a `queryID` attribute in the response.  The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).
      attr_accessor :click_analytics

      # Whether this search will be included in Analytics.
      attr_accessor :analytics

      # Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
      attr_accessor :analytics_tags

      # Whether to enable A/B testing for this search.
      attr_accessor :enable_ab_test

      # Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).  This setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
      attr_accessor :enable_re_ranking

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :query => :query,
          :filters => :filters,
          :page => :page,
          :get_ranking_info => :getRankingInfo,
          :relevancy_strictness => :relevancyStrictness,
          :facet_filters => :facetFilters,
          :optional_filters => :optionalFilters,
          :numeric_filters => :numericFilters,
          :hits_per_page => :hitsPerPage,
          :around_lat_lng => :aroundLatLng,
          :around_lat_lng_via_ip => :aroundLatLngViaIP,
          :around_radius => :aroundRadius,
          :around_precision => :aroundPrecision,
          :minimum_around_radius => :minimumAroundRadius,
          :inside_bounding_box => :insideBoundingBox,
          :inside_polygon => :insidePolygon,
          :query_languages => :queryLanguages,
          :natural_languages => :naturalLanguages,
          :enable_rules => :enableRules,
          :rule_contexts => :ruleContexts,
          :user_token => :userToken,
          :click_analytics => :clickAnalytics,
          :analytics => :analytics,
          :analytics_tags => :analyticsTags,
          :enable_ab_test => :enableABTest,
          :enable_re_ranking => :enableReRanking
        }
      end

      # Attribute type mapping.
      def self.types_mapping
        {
          :query => :"String",
          :filters => :"String",
          :page => :"Integer",
          :get_ranking_info => :"Boolean",
          :relevancy_strictness => :"Integer",
          :facet_filters => :"FacetFilters",
          :optional_filters => :"OptionalFilters",
          :numeric_filters => :"NumericFilters",
          :hits_per_page => :"Integer",
          :around_lat_lng => :"String",
          :around_lat_lng_via_ip => :"Boolean",
          :around_radius => :"AroundRadius",
          :around_precision => :"AroundPrecision",
          :minimum_around_radius => :"Integer",
          :inside_bounding_box => :"InsideBoundingBox",
          :inside_polygon => :"Array<Array<Float>>",
          :query_languages => :"Array<SupportedLanguage>",
          :natural_languages => :"Array<SupportedLanguage>",
          :enable_rules => :"Boolean",
          :rule_contexts => :"Array<String>",
          :user_token => :"String",
          :click_analytics => :"Boolean",
          :analytics => :"Boolean",
          :analytics_tags => :"Array<String>",
          :enable_ab_test => :"Boolean",
          :enable_re_ranking => :"Boolean"
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new(
          [
            :inside_bounding_box
          ]
        )
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        if (!attributes.is_a?(Hash))
          raise ArgumentError, "The input argument (attributes) must be a hash in `Algolia::Params` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) { |(k, v), h|
          if (!self.class.attribute_map.key?(k.to_sym))
            raise(
              ArgumentError,
              "`#{k}` is not a valid attribute in `Algolia::Params`. Please check the name to make sure it's valid. List of attributes: " +
                self.class.attribute_map.keys.inspect
            )
          end

          h[k.to_sym] = v
        }

        if attributes.key?(:query)
          self.query = attributes[:query]
        end

        if attributes.key?(:filters)
          self.filters = attributes[:filters]
        end

        if attributes.key?(:page)
          self.page = attributes[:page]
        end

        if attributes.key?(:get_ranking_info)
          self.get_ranking_info = attributes[:get_ranking_info]
        end

        if attributes.key?(:relevancy_strictness)
          self.relevancy_strictness = attributes[:relevancy_strictness]
        end

        if attributes.key?(:facet_filters)
          self.facet_filters = attributes[:facet_filters]
        end

        if attributes.key?(:optional_filters)
          self.optional_filters = attributes[:optional_filters]
        end

        if attributes.key?(:numeric_filters)
          self.numeric_filters = attributes[:numeric_filters]
        end

        if attributes.key?(:hits_per_page)
          self.hits_per_page = attributes[:hits_per_page]
        end

        if attributes.key?(:around_lat_lng)
          self.around_lat_lng = attributes[:around_lat_lng]
        end

        if attributes.key?(:around_lat_lng_via_ip)
          self.around_lat_lng_via_ip = attributes[:around_lat_lng_via_ip]
        end

        if attributes.key?(:around_radius)
          self.around_radius = attributes[:around_radius]
        end

        if attributes.key?(:around_precision)
          self.around_precision = attributes[:around_precision]
        end

        if attributes.key?(:minimum_around_radius)
          self.minimum_around_radius = attributes[:minimum_around_radius]
        end

        if attributes.key?(:inside_bounding_box)
          self.inside_bounding_box = attributes[:inside_bounding_box]
        end

        if attributes.key?(:inside_polygon)
          if (value = attributes[:inside_polygon]).is_a?(Array)
            self.inside_polygon = value
          end
        end

        if attributes.key?(:query_languages)
          if (value = attributes[:query_languages]).is_a?(Array)
            self.query_languages = value
          end
        end

        if attributes.key?(:natural_languages)
          if (value = attributes[:natural_languages]).is_a?(Array)
            self.natural_languages = value
          end
        end

        if attributes.key?(:enable_rules)
          self.enable_rules = attributes[:enable_rules]
        end

        if attributes.key?(:rule_contexts)
          if (value = attributes[:rule_contexts]).is_a?(Array)
            self.rule_contexts = value
          end
        end

        if attributes.key?(:user_token)
          self.user_token = attributes[:user_token]
        end

        if attributes.key?(:click_analytics)
          self.click_analytics = attributes[:click_analytics]
        end

        if attributes.key?(:analytics)
          self.analytics = attributes[:analytics]
        end

        if attributes.key?(:analytics_tags)
          if (value = attributes[:analytics_tags]).is_a?(Array)
            self.analytics_tags = value
          end
        end

        if attributes.key?(:enable_ab_test)
          self.enable_ab_test = attributes[:enable_ab_test]
        end

        if attributes.key?(:enable_re_ranking)
          self.enable_re_ranking = attributes[:enable_re_ranking]
        end
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(other)
        return true if self.equal?(other)
        self.class == other.class &&
          query == other.query &&
          filters == other.filters &&
          page == other.page &&
          get_ranking_info == other.get_ranking_info &&
          relevancy_strictness == other.relevancy_strictness &&
          facet_filters == other.facet_filters &&
          optional_filters == other.optional_filters &&
          numeric_filters == other.numeric_filters &&
          hits_per_page == other.hits_per_page &&
          around_lat_lng == other.around_lat_lng &&
          around_lat_lng_via_ip == other.around_lat_lng_via_ip &&
          around_radius == other.around_radius &&
          around_precision == other.around_precision &&
          minimum_around_radius == other.minimum_around_radius &&
          inside_bounding_box == other.inside_bounding_box &&
          inside_polygon == other.inside_polygon &&
          query_languages == other.query_languages &&
          natural_languages == other.natural_languages &&
          enable_rules == other.enable_rules &&
          rule_contexts == other.rule_contexts &&
          user_token == other.user_token &&
          click_analytics == other.click_analytics &&
          analytics == other.analytics &&
          analytics_tags == other.analytics_tags &&
          enable_ab_test == other.enable_ab_test &&
          enable_re_ranking == other.enable_re_ranking
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(other)
        self == other
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [
          query,
          filters,
          page,
          get_ranking_info,
          relevancy_strictness,
          facet_filters,
          optional_filters,
          numeric_filters,
          hits_per_page,
          around_lat_lng,
          around_lat_lng_via_ip,
          around_radius,
          around_precision,
          minimum_around_radius,
          inside_bounding_box,
          inside_polygon,
          query_languages,
          natural_languages,
          enable_rules,
          rule_contexts,
          user_token,
          click_analytics,
          analytics,
          analytics_tags,
          enable_ab_test,
          enable_re_ranking
        ].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)
        attributes = attributes.transform_keys(&:to_sym)
        transformed_hash = {}
        types_mapping.each_pair do |key, type|
          if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = nil
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[attribute_map[key]].is_a?(Array)
              transformed_hash[key.to_sym] = attributes[attribute_map[key]].map { |v|
                _deserialize(::Regexp.last_match(1), v)
              }
            end
          elsif !attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = _deserialize(type, attributes[attribute_map[key]])
          end
        end

        new(transformed_hash)
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def self._deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end

        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
          # model
        else
          # models (e.g. Pet) or oneOf
          klass = Algolia::Composition.const_get(type)
          klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass
            .build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      def to_json(*_args)
        to_hash.to_json
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end

        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to?(:to_hash)
          value.to_hash
        else
          value
        end
      end

    end

  end
end
