# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'date'
require 'time'

module Algolia
  class Run
    # The run UUID.
    attr_accessor :run_id

    attr_accessor :app_id

    # The task UUID.
    attr_accessor :task_id

    attr_accessor :status

    attr_accessor :progress

    attr_accessor :outcome

    # A percentage representing the accepted failure threshold to determine if a `run` succeeded or not.
    attr_accessor :failure_threshold

    # Explains the result of outcome.
    attr_accessor :reason

    attr_accessor :reason_code

    attr_accessor :type

    # Date of creation (RFC3339 format).
    attr_accessor :created_at

    # Date of start (RFC3339 format).
    attr_accessor :started_at

    # Date of finish (RFC3339 format).
    attr_accessor :finished_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'run_id' => :'runID',
        :'app_id' => :'appID',
        :'task_id' => :'taskID',
        :'status' => :'status',
        :'progress' => :'progress',
        :'outcome' => :'outcome',
        :'failure_threshold' => :'failureThreshold',
        :'reason' => :'reason',
        :'reason_code' => :'reasonCode',
        :'type' => :'type',
        :'created_at' => :'createdAt',
        :'started_at' => :'startedAt',
        :'finished_at' => :'finishedAt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'run_id' => :'String',
        :'app_id' => :'String',
        :'task_id' => :'String',
        :'status' => :'RunStatus',
        :'progress' => :'RunProgress',
        :'outcome' => :'RunOutcome',
        :'failure_threshold' => :'Integer',
        :'reason' => :'String',
        :'reason_code' => :'RunReasonCode',
        :'type' => :'RunType',
        :'created_at' => :'String',
        :'started_at' => :'String',
        :'finished_at' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Algolia::Run` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Algolia::Run`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'run_id')
        self.run_id = attributes[:'run_id']
      else
        self.run_id = nil
      end

      if attributes.key?(:'app_id')
        self.app_id = attributes[:'app_id']
      else
        self.app_id = nil
      end

      if attributes.key?(:'task_id')
        self.task_id = attributes[:'task_id']
      else
        self.task_id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.key?(:'outcome')
        self.outcome = attributes[:'outcome']
      end

      if attributes.key?(:'failure_threshold')
        self.failure_threshold = attributes[:'failure_threshold']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'reason_code')
        self.reason_code = attributes[:'reason_code']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'started_at')
        self.started_at = attributes[:'started_at']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @run_id.nil?
        invalid_properties.push('invalid value for "run_id", run_id cannot be nil.')
      end

      if @app_id.nil?
        invalid_properties.push('invalid value for "app_id", app_id cannot be nil.')
      end

      if @task_id.nil?
        invalid_properties.push('invalid value for "task_id", task_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if !@failure_threshold.nil? && @failure_threshold > 100
        invalid_properties.push('invalid value for "failure_threshold", must be smaller than or equal to 100.')
      end

      if !@failure_threshold.nil? && @failure_threshold < 0
        invalid_properties.push('invalid value for "failure_threshold", must be greater than or equal to 0.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @run_id.nil?
      return false if @app_id.nil?
      return false if @task_id.nil?
      return false if @status.nil?
      return false if !@failure_threshold.nil? && @failure_threshold > 100
      return false if !@failure_threshold.nil? && @failure_threshold < 0
      return false if @type.nil?
      return false if @created_at.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] failure_threshold Value to be assigned
    def failure_threshold=(failure_threshold)
      if failure_threshold.nil?
        fail ArgumentError, 'failure_threshold cannot be nil'
      end

      if failure_threshold > 100
        fail ArgumentError, 'invalid value for "failure_threshold", must be smaller than or equal to 100.'
      end

      if failure_threshold < 0
        fail ArgumentError, 'invalid value for "failure_threshold", must be greater than or equal to 0.'
      end

      @failure_threshold = failure_threshold
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          run_id == o.run_id &&
          app_id == o.app_id &&
          task_id == o.task_id &&
          status == o.status &&
          progress == o.progress &&
          outcome == o.outcome &&
          failure_threshold == o.failure_threshold &&
          reason == o.reason &&
          reason_code == o.reason_code &&
          type == o.type &&
          created_at == o.created_at &&
          started_at == o.started_at &&
          finished_at == o.finished_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [run_id, app_id, task_id, status, progress, outcome, failure_threshold, reason, reason_code, type, created_at, started_at, finished_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Algolia.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
