# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'date'
require 'time'

module Algolia
  class ABTest
    # Unique A/B test ID.
    attr_accessor :ab_test_id

    # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on click data. A value of 0.95 or over is considered to be _significant_. 
    attr_accessor :click_significance

    # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on conversion. A value of 0.95 or over is considered to be _significant_. 
    attr_accessor :conversion_significance

    # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on add-to-cart data. A value of 0.95 or over is considered to be _significant_. 
    attr_accessor :add_to_cart_significance

    # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on purchase data. A value of 0.95 or over is considered to be _significant_. 
    attr_accessor :purchase_significance

    # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on revenue data. A value of 0.95 or over is considered to be _significant_. 
    attr_accessor :revenue_significance

    # Update date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
    attr_accessor :updated_at

    # Creation date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
    attr_accessor :created_at

    # End date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
    attr_accessor :end_at

    # A/B test name.
    attr_accessor :name

    # A/B test status.
    attr_accessor :status

    # A/B test variants.
    attr_accessor :variants

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ab_test_id' => :'abTestID',
        :'click_significance' => :'clickSignificance',
        :'conversion_significance' => :'conversionSignificance',
        :'add_to_cart_significance' => :'addToCartSignificance',
        :'purchase_significance' => :'purchaseSignificance',
        :'revenue_significance' => :'revenueSignificance',
        :'updated_at' => :'updatedAt',
        :'created_at' => :'createdAt',
        :'end_at' => :'endAt',
        :'name' => :'name',
        :'status' => :'status',
        :'variants' => :'variants'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ab_test_id' => :'Integer',
        :'click_significance' => :'Float',
        :'conversion_significance' => :'Float',
        :'add_to_cart_significance' => :'Float',
        :'purchase_significance' => :'Float',
        :'revenue_significance' => :'Hash<String, Float>',
        :'updated_at' => :'String',
        :'created_at' => :'String',
        :'end_at' => :'String',
        :'name' => :'String',
        :'status' => :'String',
        :'variants' => :'Array<Variant>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Algolia::ABTest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Algolia::ABTest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ab_test_id')
        self.ab_test_id = attributes[:'ab_test_id']
      else
        self.ab_test_id = nil
      end

      if attributes.key?(:'click_significance')
        self.click_significance = attributes[:'click_significance']
      else
        self.click_significance = nil
      end

      if attributes.key?(:'conversion_significance')
        self.conversion_significance = attributes[:'conversion_significance']
      else
        self.conversion_significance = nil
      end

      if attributes.key?(:'add_to_cart_significance')
        self.add_to_cart_significance = attributes[:'add_to_cart_significance']
      else
        self.add_to_cart_significance = nil
      end

      if attributes.key?(:'purchase_significance')
        self.purchase_significance = attributes[:'purchase_significance']
      else
        self.purchase_significance = nil
      end

      if attributes.key?(:'revenue_significance')
        if (value = attributes[:'revenue_significance']).is_a?(Hash)
          self.revenue_significance = value
        end
      else
        self.revenue_significance = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'end_at')
        self.end_at = attributes[:'end_at']
      else
        self.end_at = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'variants')
        if (value = attributes[:'variants']).is_a?(Array)
          self.variants = value
        end
      else
        self.variants = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @ab_test_id.nil?
        invalid_properties.push('invalid value for "ab_test_id", ab_test_id cannot be nil.')
      end

      if @click_significance.nil?
        invalid_properties.push('invalid value for "click_significance", click_significance cannot be nil.')
      end

      if @conversion_significance.nil?
        invalid_properties.push('invalid value for "conversion_significance", conversion_significance cannot be nil.')
      end

      if @add_to_cart_significance.nil?
        invalid_properties.push('invalid value for "add_to_cart_significance", add_to_cart_significance cannot be nil.')
      end

      if @purchase_significance.nil?
        invalid_properties.push('invalid value for "purchase_significance", purchase_significance cannot be nil.')
      end

      if @revenue_significance.nil?
        invalid_properties.push('invalid value for "revenue_significance", revenue_significance cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @end_at.nil?
        invalid_properties.push('invalid value for "end_at", end_at cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @variants.nil?
        invalid_properties.push('invalid value for "variants", variants cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ab_test_id.nil?
      return false if @click_significance.nil?
      return false if @conversion_significance.nil?
      return false if @add_to_cart_significance.nil?
      return false if @purchase_significance.nil?
      return false if @revenue_significance.nil?
      return false if @updated_at.nil?
      return false if @created_at.nil?
      return false if @end_at.nil?
      return false if @name.nil?
      return false if @status.nil?
      return false if @variants.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ab_test_id == o.ab_test_id &&
          click_significance == o.click_significance &&
          conversion_significance == o.conversion_significance &&
          add_to_cart_significance == o.add_to_cart_significance &&
          purchase_significance == o.purchase_significance &&
          revenue_significance == o.revenue_significance &&
          updated_at == o.updated_at &&
          created_at == o.created_at &&
          end_at == o.end_at &&
          name == o.name &&
          status == o.status &&
          variants == o.variants
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ab_test_id, click_significance, conversion_significance, add_to_cart_significance, purchase_significance, revenue_significance, updated_at, created_at, end_at, name, status, variants].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Algolia.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
