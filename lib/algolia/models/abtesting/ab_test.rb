# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'date'
require 'time'

module Algolia
  module Abtesting
    class ABTest
      # Unique A/B test ID.
      attr_accessor :ab_test_id

      # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on click data. A value of 0.95 or over is considered to be _significant_.
      attr_accessor :click_significance

      # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on conversion. A value of 0.95 or over is considered to be _significant_.
      attr_accessor :conversion_significance

      # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on add-to-cart data. A value of 0.95 or over is considered to be _significant_.
      attr_accessor :add_to_cart_significance

      # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on purchase data. A value of 0.95 or over is considered to be _significant_.
      attr_accessor :purchase_significance

      # [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on revenue data. A value of 0.95 or over is considered to be _significant_.
      attr_accessor :revenue_significance

      # Update date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
      attr_accessor :updated_at

      # Creation date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
      attr_accessor :created_at

      # End date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
      attr_accessor :end_at

      # A/B test name.
      attr_accessor :name

      # A/B test status.
      attr_accessor :status

      # A/B test variants.
      attr_accessor :variants

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :ab_test_id => :abTestID,
          :click_significance => :clickSignificance,
          :conversion_significance => :conversionSignificance,
          :add_to_cart_significance => :addToCartSignificance,
          :purchase_significance => :purchaseSignificance,
          :revenue_significance => :revenueSignificance,
          :updated_at => :updatedAt,
          :created_at => :createdAt,
          :end_at => :endAt,
          :name => :name,
          :status => :status,
          :variants => :variants
        }
      end

      # Returns all the JSON keys this model knows about
      def self.acceptable_attributes
        attribute_map.values
      end

      # Attribute type mapping.
      def self.types_mapping
        {
          :ab_test_id => :Integer,
          :click_significance => :Float,
          :conversion_significance => :Float,
          :add_to_cart_significance => :Float,
          :purchase_significance => :Float,
          :revenue_significance => :'Hash<String, Float>',
          :updated_at => :String,
          :created_at => :String,
          :end_at => :String,
          :name => :String,
          :status => :String,
          :variants => :'Array<Variant>'
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([])
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        unless attributes.is_a?(Hash)
          raise ArgumentError, "The input argument (attributes) must be a hash in `Algolia::ABTest` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) do |(k, v), h|
          unless self.class.attribute_map.key?(k.to_sym)
            raise ArgumentError,
                  "`#{k}` is not a valid attribute in `Algolia::ABTest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end

          h[k.to_sym] = v
        end

        if attributes.key?(:ab_test_id)
          self.ab_test_id = attributes[:ab_test_id]
        else
          self.ab_test_id = nil
        end

        if attributes.key?(:click_significance)
          self.click_significance = attributes[:click_significance]
        else
          self.click_significance = nil
        end

        if attributes.key?(:conversion_significance)
          self.conversion_significance = attributes[:conversion_significance]
        else
          self.conversion_significance = nil
        end

        if attributes.key?(:add_to_cart_significance)
          self.add_to_cart_significance = attributes[:add_to_cart_significance]
        else
          self.add_to_cart_significance = nil
        end

        if attributes.key?(:purchase_significance)
          self.purchase_significance = attributes[:purchase_significance]
        else
          self.purchase_significance = nil
        end

        if attributes.key?(:revenue_significance)
          if (value = attributes[:revenue_significance]).is_a?(Hash)
            self.revenue_significance = value
          end
        else
          self.revenue_significance = nil
        end

        if attributes.key?(:updated_at)
          self.updated_at = attributes[:updated_at]
        else
          self.updated_at = nil
        end

        if attributes.key?(:created_at)
          self.created_at = attributes[:created_at]
        else
          self.created_at = nil
        end

        if attributes.key?(:end_at)
          self.end_at = attributes[:end_at]
        else
          self.end_at = nil
        end

        if attributes.key?(:name)
          self.name = attributes[:name]
        else
          self.name = nil
        end

        if attributes.key?(:status)
          self.status = attributes[:status]
        else
          self.status = nil
        end

        if attributes.key?(:variants)
          if (value = attributes[:variants]).is_a?(Array)
            self.variants = value
          end
        else
          self.variants = nil
        end
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(other)
        return true if equal?(other)

        self.class == other.class &&
          ab_test_id == other.ab_test_id &&
          click_significance == other.click_significance &&
          conversion_significance == other.conversion_significance &&
          add_to_cart_significance == other.add_to_cart_significance &&
          purchase_significance == other.purchase_significance &&
          revenue_significance == other.revenue_significance &&
          updated_at == other.updated_at &&
          created_at == other.created_at &&
          end_at == other.end_at &&
          name == other.name &&
          status == other.status &&
          variants == other.variants
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(other)
        self == other
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [ab_test_id, click_significance, conversion_significance, add_to_cart_significance, purchase_significance, revenue_significance, updated_at, created_at, end_at, name,
         status, variants].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)

        attributes = attributes.transform_keys(&:to_sym)
        transformed_hash = {}
        types_mapping.each_pair do |key, type|
          if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = nil
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[attribute_map[key]].is_a?(Array)
              transformed_hash[key.to_sym] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }
            end
          elsif !attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = _deserialize(type, attributes[attribute_map[key]])
          end
        end
        new(transformed_hash)
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def self._deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          # models (e.g. Pet) or oneOf
          klass = Algolia::Abtesting.const_get(type)
          klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      def to_json(*_args)
        to_hash.to_json
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
