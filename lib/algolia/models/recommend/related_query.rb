# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

require 'date'
require 'time'

module Algolia
  module Recommend
    class RelatedQuery
      # Index name (case-sensitive).
      attr_accessor :index_name

      # Minimum score a recommendation must have to be included in the response.
      attr_accessor :threshold

      # Maximum number of recommendations to retrieve. By default, all recommendations are returned and no fallback request is made. Depending on the available recommendations and the other request parameters, the actual number of recommendations may be lower than this value.
      attr_accessor :max_recommendations

      attr_accessor :query_parameters

      attr_accessor :model

      # Unique record identifier.
      attr_accessor :object_id

      attr_accessor :fallback_parameters

      class EnumAttributeValidator
        attr_reader :datatype
        attr_reader :allowable_values

        def initialize(datatype, allowable_values)
          @allowable_values = allowable_values.map do |value|
            case datatype.to_s
            when /Integer/i
              value.to_i
            when /Float/i
              value.to_f
            else
              value
            end
          end
        end

        def valid?(value)
          !value || allowable_values.include?(value)
        end
      end

      # Attribute mapping from ruby-style variable name to JSON key.
      def self.attribute_map
        {
          :index_name => :indexName,
          :threshold => :threshold,
          :max_recommendations => :maxRecommendations,
          :query_parameters => :queryParameters,
          :model => :model,
          :object_id => :objectID,
          :fallback_parameters => :fallbackParameters
        }
      end

      # Returns all the JSON keys this model knows about
      def self.acceptable_attributes
        attribute_map.values
      end

      # Attribute type mapping.
      def self.types_mapping
        {
          :index_name => :String,
          :threshold => :Float,
          :max_recommendations => :Integer,
          :query_parameters => :SearchParams,
          :model => :RelatedModel,
          :object_id => :String,
          :fallback_parameters => :FallbackParams
        }
      end

      # List of attributes with nullable: true
      def self.openapi_nullable
        Set.new([])
      end

      # List of class defined in allOf (OpenAPI v3)
      def self.openapi_all_of
        [
          :BaseRecommendRequest,
          :RelatedProducts
        ]
      end

      # Initializes the object
      # @param [Hash] attributes Model attributes in the form of hash
      def initialize(attributes = {})
        unless attributes.is_a?(Hash)
          raise ArgumentError, "The input argument (attributes) must be a hash in `Algolia::RelatedQuery` initialize method"
        end

        # check to see if the attribute exists and convert string to symbol for hash key
        attributes = attributes.each_with_object({}) do |(k, v), h|
          unless self.class.attribute_map.key?(k.to_sym)
            raise ArgumentError,
                  "`#{k}` is not a valid attribute in `Algolia::RelatedQuery`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
          end

          h[k.to_sym] = v
        end

        if attributes.key?(:index_name)
          self.index_name = attributes[:index_name]
        else
          self.index_name = nil
        end

        if attributes.key?(:threshold)
          self.threshold = attributes[:threshold]
        else
          self.threshold = nil
        end

        if attributes.key?(:max_recommendations)
          self.max_recommendations = attributes[:max_recommendations]
        end

        if attributes.key?(:query_parameters)
          self.query_parameters = attributes[:query_parameters]
        end

        if attributes.key?(:model)
          self.model = attributes[:model]
        else
          self.model = nil
        end

        if attributes.key?(:object_id)
          self.object_id = attributes[:object_id]
        else
          self.object_id = nil
        end

        if attributes.key?(:fallback_parameters)
          self.fallback_parameters = attributes[:fallback_parameters]
        end
      end

      # Custom attribute writer method with validation
      # @param [Object] threshold Value to be assigned
      def threshold=(threshold)
        if threshold.nil?
          raise ArgumentError, 'threshold cannot be nil'
        end

        if threshold > 100
          raise ArgumentError, 'invalid value for "threshold", must be smaller than or equal to 100.'
        end

        if threshold < 0
          raise ArgumentError, 'invalid value for "threshold", must be greater than or equal to 0.'
        end

        @threshold = threshold
      end

      # Custom attribute writer method with validation
      # @param [Object] max_recommendations Value to be assigned
      def max_recommendations=(max_recommendations)
        if max_recommendations.nil?
          raise ArgumentError, 'max_recommendations cannot be nil'
        end

        if max_recommendations > 1000
          raise ArgumentError, 'invalid value for "max_recommendations", must be smaller than or equal to 1000.'
        end

        if max_recommendations < 1
          raise ArgumentError, 'invalid value for "max_recommendations", must be greater than or equal to 1.'
        end

        @max_recommendations = max_recommendations
      end

      # Checks equality by comparing each attribute.
      # @param [Object] Object to be compared
      def ==(other)
        return true if equal?(other)

        self.class == other.class &&
          index_name == other.index_name &&
          threshold == other.threshold &&
          max_recommendations == other.max_recommendations &&
          query_parameters == other.query_parameters &&
          model == other.model &&
          object_id == other.object_id &&
          fallback_parameters == other.fallback_parameters
      end

      # @see the `==` method
      # @param [Object] Object to be compared
      def eql?(other)
        self == other
      end

      # Calculates hash code according to all attributes.
      # @return [Integer] Hash code
      def hash
        [index_name, threshold, max_recommendations, query_parameters, model, object_id, fallback_parameters].hash
      end

      # Builds the object from hash
      # @param [Hash] attributes Model attributes in the form of hash
      # @return [Object] Returns the model itself
      def self.build_from_hash(attributes)
        return nil unless attributes.is_a?(Hash)

        attributes = attributes.transform_keys(&:to_sym)
        transformed_hash = {}
        types_mapping.each_pair do |key, type|
          if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = nil
          elsif type =~ /\AArray<(.*)>/i
            # check to ensure the input is an array given that the attribute
            # is documented as an array but the input is not
            if attributes[attribute_map[key]].is_a?(Array)
              transformed_hash[key.to_sym] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }
            end
          elsif !attributes[attribute_map[key]].nil?
            transformed_hash[key.to_sym] = _deserialize(type, attributes[attribute_map[key]])
          end
        end
        new(transformed_hash)
      end

      # Deserializes the data based on type
      # @param string type Data type
      # @param string value Value to be deserialized
      # @return [Object] Deserialized data
      def self._deserialize(type, value)
        case type.to_sym
        when :Time
          Time.parse(value)
        when :Date
          Date.parse(value)
        when :String
          value.to_s
        when :Integer
          value.to_i
        when :Float
          value.to_f
        when :Boolean
          if value.to_s =~ /\A(true|t|yes|y|1)\z/i
            true
          else
            false
          end
        when :Object
          # generic object (usually a Hash), return directly
          value
        when /\AArray<(?<inner_type>.+)>\z/
          inner_type = Regexp.last_match[:inner_type]
          value.map { |v| _deserialize(inner_type, v) }
        when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
          k_type = Regexp.last_match[:k_type]
          v_type = Regexp.last_match[:v_type]
          {}.tap do |hash|
            value.each do |k, v|
              hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
            end
          end
        else # model
          # models (e.g. Pet) or oneOf
          klass = Algolia::Recommend.const_get(type)
          klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
        end
      end

      # Returns the string representation of the object
      # @return [String] String presentation of the object
      def to_s
        to_hash.to_s
      end

      # to_body is an alias to to_hash (backward compatibility)
      # @return [Hash] Returns the object in the form of hash
      def to_body
        to_hash
      end

      def to_json(*_args)
        to_hash.to_json
      end

      # Returns the object in the form of hash
      # @return [Hash] Returns the object in the form of hash
      def to_hash
        hash = {}
        self.class.attribute_map.each_pair do |attr, param|
          value = send(attr)
          if value.nil?
            is_nullable = self.class.openapi_nullable.include?(attr)
            next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
          end

          hash[param] = _to_hash(value)
        end
        hash
      end

      # Outputs non-array value in the form of hash
      # For object, use to_hash. Otherwise, just return the value
      # @param [Object] value Any valid value
      # @return [Hash] Returns the value in the form of hash
      def _to_hash(value)
        if value.is_a?(Array)
          value.compact.map { |v| _to_hash(v) }
        elsif value.is_a?(Hash)
          {}.tap do |hash|
            value.each { |k, v| hash[k] = _to_hash(v) }
          end
        elsif value.respond_to? :to_hash
          value.to_hash
        else
          value
        end
      end
    end
  end
end
